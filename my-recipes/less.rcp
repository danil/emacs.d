;; (global-set-key (kbd "M-v") 'less-scroll-down-line)
;; (global-set-key (kbd "C-v") 'less-scroll-up-line)
;; (global-set-key (kbd "M-p") 'scroll-down-command)
;; (global-set-key (kbd "M-n") 'scroll-up-command)

(my-after-init
  (my-add-mode-to-hooks 'less-minor-mode-on my-read-only-modes-hooks)

  (my-add-mode-to-hooks
   (lambda ()
     (let ((my-file-name (when (buffer-file-name)
                           (file-name-nondirectory buffer-file-name))))
       (when (or (and
                  (buffer-file-name)
                  (not (delq nil (mapcar (lambda (regex)
                                           (string-match regex my-file-name))
                                         '(
                                           "^COMMIT_EDITMSG$"
                                           "^\\.loaddefs\\.el$"
                                           "autoloads\\.el$"
                                           )))))
                 ;; (delq nil (mapcar (lambda (regex)
                 ;;                     (string-match regex (buffer-name)))
                 ;;                   '(
                 ;;                     "^\\*Ibuffer\\*$"
                 ;;                     "^\\*Man "
                 ;;                     "^\\*magit"
                 ;;                     ;; "^\\*GNU Emacs\\*$"
                 ;;                     )))
                 )
         (less-minor-mode-on))))
   '(clojure-mode-hook
     diff-mode-hook
     emacs-lisp-mode-hook))

  ;; (my-eval-after-load 'less
  ;;   (add-hook 'find-file-hook
  ;;             '(lambda ()
  ;;                (when buffer-read-only
  ;;                  (less-minor-mode-on))))
  ;;   (global-set-key (kbd "ESC ESC ESC")
  ;;                   'less-minor-mode)
  ;;   (global-set-key (kbd "M-S-v") 'scroll-down-command)
  ;;   (global-set-key (kbd "C-S-v") 'scroll-up-command))
  (global-set-key (my-kbd "C-f") 'my-less-minor-mode-toggle)

  (my-eval-after-load 'less
    (define-key less-minor-mode-map (kbd "G") nil)
    (define-key less-minor-mode-map (kbd "SPC") nil)
    (define-key less-minor-mode-map (kbd "b") nil)
    (define-key less-minor-mode-map (kbd "e") nil)
    (define-key less-minor-mode-map (kbd "f") nil)
    (define-key less-minor-mode-map (kbd "g") nil)
    (define-key less-minor-mode-map (kbd "g") nil)
    (define-key less-minor-mode-map (kbd "") nil)))

(defun my-less-minor-mode-toggle ()
  (interactive)
  (when (and (or (not (boundp 'less-minor-mode))
                 (not less-minor-mode))
             (buffer-file-name)
             ;; (buffer-modified-p)
             ;; (y-or-n-p (format "Save file %s? " (buffer-file-name)))
             )
    (call-interactively 'save-buffer))
  (call-interactively 'less-minor-mode))
